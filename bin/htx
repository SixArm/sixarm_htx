#!/usr/bin/env ruby
require 'open4'
require 'pp'
require 'cgi'
require 'fileutils'
require 'pathname'
require 'rexml/document'
require 'sixarm_ruby_rexml_element_new_with_options'
require_relative '../lib/htx'

=begin rdoc

# Environment Variables

## App Root Path

The application root directory.

Example:

    var[:app_root] #=> /usr/local/bin

This is set automatcally.

This is a `Pathname` object.


## Doc Root Path

The document root directory.

Example:

    var[:doc_root] #=> /var/www/html

The default is the present working directory.

This is a `Pathname` object.


## Web Root URI.

The web root URI.

Example:

    var[:web_root] #=> http://example.com

The default is "http://example.com".

This is a `URI` object.


## Email Address

The  email address default for this HTX run.

Example:

    var[:email] #=> "example@example.com"

The default is "example@example.com".

This is a `String` object.

This is converted to `mailto` links on the various web pages.


## Theme

Default theme key, e.g. the site "my.com" can define
its own theme name "My Demo Theme" and with the key "demo".
The id must have no spaces. The id should be snake case.

Example:

    var[:theme] #=> "example"

The default is "example".

This is a `String` object.

=end


class HTX

  # The path of this running file.
  MYDIR = File.expand_path(File.dirname(__FILE__))

  # HTX methods can pass around semi-global info by using the @var hash.
  #
  # For example, the transform 'foo' could set @var['a']='b' then later on
  # the tag 'bar' could retrieve @var['a']
  attr_accessor :var

  # When an HTX file includes another file, HTX may cache the file contents.
  # We call this cache `hti` meaning "HTX includes"
  attr_accessor :hti

  ###
  #
  # INITIALIZE
  #
  ###

  # Initialize everything.
  #
  def init
    init_vars
    init_transforms
    init_themes
    init_pwd
    init_hti("header","footer","disqus")
  end

  # Initialize the environment variables.
  #
  def init_vars
    @var = Hashy.new
    var[:app][:root][:path] = File.expand_path(File.dirname(__FILE__))
    var[:doc][:root][:path] = Pathname(Dir.pwd)
    var[:web][:root][:uri] = URI("http://example.com")
    var[:email] = "example@example.com"
    var[:theme] = "example"
    var[:pwd]= Pathname(Dir.pwd)
  end

  # HTX configures itself based on cascading ".htx" files.
  # We start at the top level directory, and we work our way
  # to the present working directory; we load any ".htx" file.
  #
  def init_dot_htx
    Pathname.descend(Dir.pwd).each{|path|
      if File.exist?(path + ".htx")
        #TODO: load_htx(path)
      end
    }
  end

  # Initialize the transforms.
  #
  # We use a file naming convention for transforms:
  #
  #  * t0: transform that uses no tag, e.g. transfor "(C)" to "&copy".
  #  * t1: transform that uses one tag, e.g. "<foo/>".
  #  * t2: transform that uses two tags, e.g. "<foo>...</foo>".
  #
  def init_transforms
    require_dir(MYDIR + "/transforms")
  end

  # HTX provides theme capabilities, such as having custom tags.
  # For example, the website "my.com" can define its own transforms.
  #
  def init_themes
    @theme_sets||={}
    puts "init_themes"
    Dir.entries(MYDIR+"themes/").grep(/\w/).each{|theme| require_dir(MYDIR+"themes/"+theme+"/") }
  end

  # Each theme must call init with these settings:
  #
  #  * key: the theme keyword identifier
  #  * doc: the system root path to the html files
  #  * web: the web root path to the html pages
  #  * email: the email address of the administrator
  #
  # Example:
  #
  #     $htx.init_theme(
  #       key: 'demo',
  #       doc: '/var/www/html',
  #       web: 'http://my.com',
  #       email: 'me@my.com'
  #     )
  #
  def init_theme(ops={})
    key = ops[:key]
    puts "init_theme #{key}"
    @theme_sets[key]=ops
  end

  #TODO
  #
  def init_pwd
    puts "init_pwd"
    init_pwd_themes
  end

  def init_pwd_themes
    if @themesets
      @themesets.each_pair{|themesets_key,themesets_val|
        if @pwd.include?(themesets_key)
          @theme = themesets_key
          @themeset = themesets_val
          @docroot = @themeset['docroot']
          @webroot = @themeset['webroot']
          @email = @themeset['email']
        end
        return
      }
      raise "unknown theme for pwd:#{pwd}"
    end
  end

  ###
  #
  # TRANSFORM
  #
  ###

  # Call all the built-in transforms

  def transform(s)
    s=transform_t0(s)
    s=transform_add_header_and_footer(s)
    s=transform_entire_page(s)
    s=transform_xml_pairs(s)
    s=transform_substitute(s)
    s=transform_xml(s)
  end

  def transform_t0(text)
    self.instance_methods.grep(/^htx_t0_/).each{|meth|
      text = send(method_name, text)
    }
    text
  end


  # We prepend the header text & append the footer text

  def transform_add_header_and_footer(s)
    @hti['header']+s+@hti['footer']
  end


  # Do all the substitutions, such as replacing text variables

  def transform_substitute(s)
    s=transform_substitute_var(s)
    #s=transform_substitute_stars(s)
    #['header','body','title'].each{|tag| s.combine_tag(tag)}
    return s
  end


  def transform_entire_page(s)

    s.gsub!(/\<(include|railapp-gems-and-plugins) *(.*?)\/>/){
      tag=$1
      attr=$2
      send_tag_text("tag1_"+tag,attr)
    }

    while result = s.gsub!(/\<(article|citelink|cmd|ed|javascript|lis|list|listy|man|mysql|ruby|sh|sh0|sh1|sh2|talk|skills|see|set|toclist|uri|wikipedia|wikipedias|x)>(.*?)<\/\1>/m){
        tag=$1
        text=$2
        send_tag_text("tag2_"+tag,text)
      }
    end

    return s
  end


  def transform_xml_pairs(s)
    while result = s.gsub!(/<(#{@theme}:[:\w]+)>(.*?)<\/\1>/m){
        tag=$1
        text=$2
        send_tag_text(tag,text)
      }
    end
    return s
  end


  # Replace variables e.g. "<=foo>" => @var['foo']

  def transform_substitute_var(s)
    s.gsub(/<=(\w+)\>/){ @var[$1] }
  end


  # Replace XML tags in a valid XML string
  def transform_xml(s)
    doc = REXML::Document.new(s, {:raw=> ['script']})
#    ['cmd','sixarm_favicons','sixarm_repo_lister_title','sixarm_repo_lister_items'].each{|tag|
#      doc.elements.each("//#{tag}"){|e|
#        send("tag_" + tag_to_method_name(tag), e).each{|result| e << result}
#      }
#    }
#    s = ""
#    doc.write s
    return s
  end


  ###
  #
  # IO
  #
  ###

  # Return an array of htx input file names that we will process

  def input_file_paths
    ((ARGV[0]=='*') ? Dir.entries('.') : ARGV).select{|x| x=~/\.ht$/ and x!=~/^\.\#/}
  end


  # Given a doc file path, return the corresponding web URL href.
  #
  # Suppose we have:
  #
  #     @doc_root = "/foo"
  #     @web_root = "https://example.com/goo"
  #
  # Example:
  #
  #     file_path_to_href("/foo/demo.ht")
  #     #=> "https://example.com/mydir/goo/demo.html"
  #
  # If the URL ends in "/index.html" then we truncate it to "/".
  #
  # Example:
  #
  #     file_path_to_href("/foo/index.ht")
  #     #=> "https://example.com/mydir/goo/"
  #
  def file_path_to_href(file_path)
    File::expand_path(file_path).sub(@doc_root, @web_root).sub(/\.ht$/,'.html').sub(/\/index.html$/,'/')
  end

  # Process an entire file.
  #
  # This method:
  #
  #   1. Reads the file "foo.ht"
  #   2. Transforms the text
  #   3. Writes the new file "foo.html"
  #
  # Example:
  #
  #     process_file_path("foo.ht")
  #
  def process_file_path(file_path)
    p "HTX #{file_path}"
    text = File.read(file_path)
    @var = {
      'file_path' => file_path,
      'canonical' => file_path_to_href(file_path)
    }
    text=transform(text)
    File.open(file_path + 'ml','w'){|f| f.write(text) }
  end


  ###
  #
  # HELPERS
  #
  ###


  # Each theme can add its own cooks, as many as we want.
  # Each of these cooks will be called with the entire page text.

  def add_cook(method_name)
    @cooks||=[]
    @cooks << method_name
  end


  # Require all the Ruby files in a given directory

  def require_dir(dir)
    Dir.entries(dir).grep(/\.rb$/).map{|x| dir + x.sub(/\.rb$/,'')}.each{|req|
      require req
    }
  end

  def send_tag_text(tag,text)
    pp "send_tag_text tag:#{tag}"
    send(tag_to_method_name(tag),text)
  end

  def tag_to_method_name(tag)
    tag.gsub(/\W/,'_')
  end

end


### MAIN

return if !ARGV or ARGV.size<1
$htx = Htx.new
$htx.init
#HTX = $htx
#@@htx = $htx
$htx.input_file_paths.each{|x| $htx.process_file_path(x) }
